#!/usr/bin/env bash
# Fake ADB shim that reads fixtures for tests.
# Behavior selected via FAKE_ADB_SCENARIO env var.
set -euo pipefail

MODE="${FAKE_ADB_SCENARIO:-good}"
ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
FIX="$ROOT/fixtures"
BASE_FS="$FIX/device_fs"
RUNTIME_FS="${FAKE_ADB_RUNTIME_FS:-/tmp/fake_device_fs}"
mkdir -p "$RUNTIME_FS"
if [[ ! -e "$RUNTIME_FS/.seeded" ]]; then
  rm -rf "$RUNTIME_FS"
  cp -a "$BASE_FS" "$RUNTIME_FS"
  touch "$RUNTIME_FS/.seeded"
fi

fixture() {
  local name="$1"
  local path="$FIX/$name"
  [[ -f "$path" ]] || return 1
  cat "$path"
}

copy_from_device() {
  local src="$1" dst="$2"
  local abs_src="$RUNTIME_FS${src}"
  if [[ -f "$abs_src" ]]; then
    mkdir -p "$(dirname "$dst")"
    cp "$abs_src" "$dst"
    return 0
  fi
  return 1
}

copy_on_device() {
  local src="$1" dst="$2"
  local abs_src="$RUNTIME_FS${src}"
  local abs_dst="$RUNTIME_FS${dst}"
  mkdir -p "$(dirname "$abs_dst")"
  cp "$abs_src" "$abs_dst"
}

remove_on_device() {
  local path="$1"
  rm -f "$RUNTIME_FS${path}"
}

# adb devices (and devices -l)
if [[ "${1:-}" == "devices" ]]; then
  if [[ "${2:-}" == "-l" ]]; then
    fixture "adb_devices_l_${MODE}.txt" || fixture "adb_devices_l_good.txt"
  else
    fixture "adb_devices_${MODE}.txt" || fixture "adb_devices_good.txt"
  fi
  exit 0
fi

# top-level get-state
if [[ "${1:-}" == "get-state" ]]; then
  fixture "get_state_device.txt" || echo device
  exit 0
fi

# handle -s SERIAL CMD ...
if [[ "${1:-}" == "-s" ]]; then
  shift
  serial="${1:-}"; shift || true
  cmd="${1:-}"; shift || true

  case "$cmd" in
    get-state)
      fixture "get_state_device.txt" || echo device
      exit 0
      ;;
    shell)
      sub="${1:-}"; shift || true
      if [[ "$MODE" == "nosha" && "$sub" == command\ -v\ sha256sum* ]]; then
        exit 1
      fi
      case "$sub" in
        echo)
          if [[ "${1:-}" == "OK" ]]; then fixture "echo_OK.txt" || echo OK; fi
          exit 0
          ;;
        df)
          if [[ "${1:-}" == "-h" && "${2:-}" == "/data" ]]; then
            fixture "df_h_data.txt" && exit 0
          fi
          ;;
        pm)
          sub2="${1:-}"; shift || true
          case "$sub2" in
            list)
              if [[ "$MODE" == "list_fail" ]]; then
                fixture "pm_list_fail.txt" >&2
                exit 1
              fi
              if [[ "${1:-}" == "packages" ]]; then
                if [[ "${2:-}" == "-f" && "${3:-}" == "-3" ]]; then
                  fixture "pm_list_f_3.txt" && exit 0
                elif [[ "${2:-}" == "-3" ]]; then
                  fixture "pm_list_3.txt" && exit 0
                fi
                fixture "pm_list_all.txt" && exit 0
              fi
              ;;
            path)
              pkg="${1:-}"
              file="pm_path_${pkg//./_}.txt"
              if fixture "$file"; then
                [[ -s "$FIX/$file" ]] && exit 0
              fi
              exit 1
              ;;
          esac
          ;;
        dumpsys)
          if [[ "${1:-}" == "package" ]]; then
            pkg="${2:-}"
            file="dumpsys_${pkg//./_}.txt"
            if fixture "$file"; then
              exit 0
            fi
            exit 1
          fi
          ;;
        test)
          if [[ "${1:-}" == "-f" ]]; then
            path="${2:-}"
            [[ -f "$RUNTIME_FS${path}" ]]
            exit $?
          fi
          ;;
        stat)
          if [[ "${1:-}" == "-c" && "${2:-}" == "%s" ]]; then
            path="${3:-}"
            if [[ -f "$RUNTIME_FS${path}" ]]; then
              stat -c %s "$RUNTIME_FS${path}"
              exit 0
            fi
            exit 1
          fi
          ;;
        toybox)
          subtoy="${1:-}"; shift || true
          case "$subtoy" in
            stat)
              if [[ "${1:-}" == "-c" && "${2:-}" == "%s" ]]; then
                path="${3:-}"
                if [[ -f "$RUNTIME_FS${path}" ]]; then
                  stat -c %s "$RUNTIME_FS${path}"
                  exit 0
                fi
                exit 1
              fi
              ;;
            sha256sum)
              path="${1:-}"
              if [[ "$MODE" == "nosha" ]]; then
                exit 127
              fi
              if [[ -f "$RUNTIME_FS${path}" ]]; then
                sha256sum "$RUNTIME_FS${path}"
                exit 0
              fi
              exit 1
              ;;
          esac
          ;;
        sha256sum)
          path="${1:-}"
          if [[ "$MODE" == "nosha" ]]; then
            exit 127
          fi
          if [[ -f "$RUNTIME_FS${path}" ]]; then
            sha256sum "$RUNTIME_FS${path}"
            exit 0
          fi
          exit 1
          ;;
        cp)
          src="${1:-}"; dst="${2:-}"
          if [[ "$MODE" == "pull_perm" && "$dst" != /data/local/tmp/* ]]; then
            exit 1
          fi
          copy_on_device "$src" "$dst" && exit 0 || exit 1
          ;;
        rm)
          path="${1:-}"
          remove_on_device "$path"
          exit 0
          ;;
        'id;')
          if [[ "${1:-}" == "whoami;" && "${2:-}" == "getprop" && "${3:-}" == "ro.build.version.release" ]]; then
            fixture "id_whoami_getprop.txt"
            exit 0
          fi
          ;;
      esac
      exit 0
      ;;
    pull)
      args=("$@")
      src="${args[0]:-}"
      dst="${args[-1]:-}"
      case "$MODE" in
        pull_fail)
          echo "Permission denied" >&2
          exit 1
          ;;
        pull_perm)
          if [[ "$src" == /data/local/tmp/* ]]; then
            copy_from_device "$src" "$dst" && exit 0
            echo "Permission denied" >&2; exit 1
          else
            echo "Permission denied" >&2; exit 1
          fi
          ;;
        *)
          copy_from_device "$src" "$dst" && exit 0
          echo "Permission denied" >&2
          exit 1
          ;;
      esac
      ;;
  esac
fi

# default success
exit 0
